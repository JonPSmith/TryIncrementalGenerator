// Copyright (c) 2023 Jon P Smith, GitHub: JonPSmith, web: http://www.thereformedprogrammer.net/
// Licensed under MIT license. See License.txt in the project root for license information.

using System.Reflection;
using System.Text;

namespace MySourceGenerator.SupportCode;

public static class BuildReadClass
{

    public static string? CreateReadCode(this ExtractedQueryInfo queryInfo)
    {
        if (!queryInfo.IsValid) return null;

        var linesOfCode = new StringBuilder();

        //This isn't the quickest approach, but it makes it easier to see the code 
        linesOfCode.AppendLine("// <auto-generated />");
        foreach (var usingProject in queryInfo.UsingProjectNames!)
        {
            //usings
            linesOfCode.AppendLine($"using {usingProject}");
        }
        linesOfCode.AppendLine("")
            .AppendLine($"namespace {queryInfo.NamespaceName}")
            .AppendLine("")
            .AppendLine($"public partial class {queryInfo.QueryType!.Name}")
            .AppendLine("{")
            .AppendLine($"    public IList<{queryInfo.QueryType!.Name}> ReadPersonNameList({queryInfo.DbContextType!.Name} context)")
            .AppendLine("     {")
            .AppendLine($"         return context.Set<{queryInfo.EntityType!.Name}>().Select(p => new {queryInfo.QueryType.Name}")
            .AppendLine("          {");
        foreach (var readPropDbProp in DatabaseToReadClassMapping(queryInfo.EntityType!, queryInfo.QueryType))
        {
            //The Select the properties 
            linesOfCode.AppendLine($"              {readPropDbProp.readProp} = {readPropDbProp.databaseProp},");
        }
        linesOfCode.AppendLine("          }).ToList();");
        linesOfCode.AppendLine("    }");
        linesOfCode.AppendLine("}");


        return linesOfCode.ToString();
    }

    /// <summary>
    /// This matches the database class's properties to the query class properties
    /// This is super-simple mapping at this version (i.e no AutoMapper features)
    /// </summary>
    /// <param name="databaseEntity"></param>
    /// <param name="readType"></param>
    /// <returns></returns>
    private static IList<(string readProp, string databaseProp)> DatabaseToReadClassMapping(Type databaseEntity, Type readType)
    {
        var dbPropertiesDict = databaseEntity.GetProperties(BindingFlags.Instance | BindingFlags.Public)
            .ToDictionary(key => key.Name, data => data.PropertyType);

        var result = new List<(string readProp, string databaseProp)>();
        foreach (var readProp in readType.GetProperties(BindingFlags.Instance | BindingFlags.Public))
        {
            if (dbPropertiesDict.TryGetValue(readProp.Name, out var databasePropType) 
                && readProp.PropertyType == databasePropType)
            {
                result.Add( (readProp.Name, readProp.Name));
                dbPropertiesDict.Remove(readProp.Name);
            }
        }

        return result;
    }
}